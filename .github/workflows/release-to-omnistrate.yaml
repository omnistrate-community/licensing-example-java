name: Release to Omnistrate

on:
  workflow_call:
    inputs:
      create-instance:
        description: 'Whether to create an instance after updating the plan'
        type: boolean
        required: false
        default: false
  workflow_dispatch:
    inputs:
      create-instance:
        description: 'Whether to create an instance after updating the plan'
        type: boolean
        required: false
        default: false

env:
  PROJECT_NAME: licensing-example-java
  SERVICE_NAME: licensing-example-java
  MAIN_RESOURCE_NAME: licensing-example-java
  ENVIRONMENT_TYPE: Dev
  IMAGE_VERSION: ${{ github.ref_name }}
  CLOUD_PROVIDER: aws
  REGION: ap-south-1
  
jobs:
  update-plan:
    name: Release Plan to ${{ env.ENVIRONMENT_TYPE }}
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get Chart Version
        id: get_chart_version
        run: |
          # Get chart version from Chart.yaml
          CHART_VERSION=$(grep '^version:' charts/helm/Chart.yaml | awk '{print $2}')
          echo "Chart version: $CHART_VERSION"
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT

      - name: Replace Version tags in spec.yaml
        run: |
          sed -i 's#<CHART_VERSION>#${{ steps.get_chart_version.outputs.CHART_VERSION }}#g' spec.yaml
          sed -i 's#<IMAGE_VERSION>#${{ env.IMAGE_VERSION }}#g' spec.yaml

      - name: Print update spec.yaml
        run: cat spec.yaml

      - name: Set up Omnistrate CLI
        uses: omnistrate-oss/setup-omnistrate-ctl@v1
        with:
          email: ${{ secrets.OMNISTRATE_USERNAME }}
          password: ${{ secrets.OMNISTRATE_PASSWORD }}

      - name: Update Omnistrate plan in environment
        run: |
          omnistrate-ctl build -s ServicePlanSpec -f spec.yaml --product-name ${SERVICE_NAME} --environment ${ENVIRONMENT_TYPE} --environment-type ${ENVIRONMENT_TYPE} --release-as-preferred


  create-instance:
    name: Create Instance in Omnistrate
    if: ${{ inputs.create-instance == 'true' }}
    needs: update-plan
    runs-on: ubuntu-latest

    steps:
      - name: Set up Omnistrate CLI
        uses: omnistrate-oss/setup-omnistrate-ctl@v1
        with:
          email: ${{ secrets.OMNISTRATE_USERNAME }}
          password: ${{ secrets.OMNISTRATE_PASSWORD }}

      - name: Create Instance
        id: create_instance
        run: |
          INSTANCE_ID=$(omnistrate-ctl instance create --environment ${ENVIRONMENT} --cloud-provider ${CLOUD_PROVIDER} --region ${REGION} --plan ${SERVICE_PLAN} --service ${SERVICE_NAME} --resource ${MAIN_RESOURCE_NAME} --output json | jq -r '.instance_id')
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Check Instance Status
        timeout-minutes: 10
        run: |
              echo "Waiting for instance to become ACTIVE..."
              STATUS="DEPLOYING"
              while [ "$STATUS" != "ACTIVE" ]; do
              STATUS=$(omnistrate-ctl instance describe ${{ steps.create_instance.outputs.instance_id }} -o json | jq -r '.consumptionResourceInstanceResult.status')
              echo "Instance Status: $STATUS"
              if [ "$STATUS" = "FAILED" ]; then
                echo "Instance deployment failed"
                exit 1
              fi
              if [ "$STATUS" != "ACTIVE" ]; then
                echo "Waiting 30 seconds before checking again..."
                sleep 30
              fi
              done
              echo "Instance is now ACTIVE"

      - name: Output Instance Details
        run: |
          omnistrate-ctl instance describe ${{ steps.create_instance.outputs.instance_id }} -o json

      - name: Delete Instance
        if: always()
        run: |
          omnistrate-ctl instance delete ${{ steps.create_instance.outputs.instance_id }} --yes
